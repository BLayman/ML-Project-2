import random
from radialBasis import Cluster
from asyncio.windows_events import NULL
class KMeans:
    k = 0
    data_points = [[]]
    means = []
    hasChanged = False
    def __init__(self, data_points, k):
        self.k = k
        self.data_points = data_points
        #Creates random indexes without replacement, for our initial centroids
        means_index = random.sample(range(0,len(self.data_points)), self.k)
        print(means_index)
        #Creates a new cluster object for each random mean data point
        for i in range(len(means_index)):
            self.means.append(Cluster(self.data_points[means_index(i)]))
    def calc_means(self):
        print(self.data_points)
        print(self.means)
        min_d = NULL
        min_cluster_index = NULL
        for i in self.data_points:
            distance = self.calc_distance(self.data_points[i], self.means[0])
            min_cluster_index = 0
            for j in range(j + 1, len(self.means)):
                distance = self.calc_distance(self.data_points[i], self.means[j].mean)
                if distance <= min_d:
                    min_cluster_index = j
            self.means[min_cluster_index].addPoint(self.data_points[i])
            min_d = NULL
            min_cluster_index = NULL
        if self.hasChanged:
            for i in self.means:
                self.means[i].calcCentroid
                if self.means[i].hasChanged:
                    self.hasChagned = True
                self.means[i].cluster_points
        
    def calc_distance(self, d1, d2):
        distance = 0.0
        for i in d1:
            # adds the square of the difference of each variable in the data point
            distance += (d1[i] - d2[i])^2 
        #returns the Euclidean distance between two vectors
        return distance ^ (1/2) 

if __name__ == "__main__":
    data = [[[0, None] for i in range(4)] for j in range(4)]

    for  i in range (4):
        for j in range (4):
            data[i][j] = random.randint(1,10)
    means1 = KMeans(data, 2)
    means1.calc_means()